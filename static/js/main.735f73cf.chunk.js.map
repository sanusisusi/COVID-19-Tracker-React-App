{"version":3,"sources":["Components/Cards/Cards.module.css","App/App.module.css","Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","Components/Footer/Footer.module.css","API/index.js","Assets/Images/corona-virus-logo.jpg","Components/Cards/Cards.jsx","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","Components/Footer/Footer.jsx","App/App.js","reportWebVitals.js","index.js"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Cards","className","Grid","container","spacing","justify","item","component","Card","xs","md","Cx","Styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","fromControl","NativeSelect","defaultValue","onChange","e","target","i","Footer","year","getFullYear","footer","rel","href","App","state","fetchedData","setState","this","image","src","CoronaVirus","alt","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.735f73cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__266_k\",\"card\":\"Cards_card__2pm9T\",\"infected\":\"Cards_infected__2X1kf\",\"recovered\":\"Cards_recovered__2mnL8\",\"deaths\":\"Cards_deaths__10kRM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__QpnuG\",\"image\":\"App_image__1xVCo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__lS0O1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fromControl\":\"CountryPicker_fromControl__kAknJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2rdEp\"};","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","export default __webpack_public_path__ + \"static/media/corona-virus-logo.a2427bb2.jpg\";","import { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\nimport Cx from \"classnames\";\nimport React from \"react\";\nimport CountUp from \"react-countup\";\nimport Styles from \"./Cards.module.css\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading ...\";\n  }\n\n  return (\n    <div className=\"Styles.container\">\n      <Grid container spacing={3} justify=\"center\">\n        {/* Infected */}\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={Cx(Styles.card, Styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        {/* Recovered */}\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={Cx(Styles.card, Styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        {/* Deaths */}\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={Cx(Styles.card, Styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of death caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React, { useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { fetchDailyData } from \"./../../API\";\nimport Styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \" rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className={Styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import { FormControl, NativeSelect } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { fetchCountries } from \"./../../API\";\nimport Styles from \"./CountryPicker.module.css\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={Styles.fromControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => (\n          <option key={i} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport Styles from \"./Footer.module.css\";\n\nexport default function Footer() {\n  const year = new Date().getFullYear();\n\n  return (\n    <footer className={Styles.footer}>\n      <h2>COVID-19 Tracker</h2>\n      <p>\n        &copy; <span> {year} </span>  \n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://www.github.com/sanusisusi\"\n        >\n          Sanusi Abdulkadir\n        </a>\n        <br/>Software Engineer (React developer)\n      </p>\n    </footer>\n  );\n}\n","import React, { Component } from \"react\";\nimport { fetchData } from \"./../API\";\nimport CoronaVirus from \"./../Assets/Images/corona-virus-logo.jpg\";\nimport { Cards, Chart, CountryPicker, Footer } from \"./../Components\";\nimport Styles from \"./App.module.css\";\n\nexport default class App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <>\n        <div className={Styles.container}>\n          <img className={Styles.image} src={CoronaVirus} alt=\"covid-19\" />\n          <Cards data={data} />\n          <CountryPicker handleCountryChange={this.handleCountryChange} />\n          <Chart data={data} country={country} />\n        </div>\n        <Footer />\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App/App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}